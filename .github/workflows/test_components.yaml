name: Test Components

on:
  push:
    branches:
      - master
    paths:
      - 'mlops-platform/**'
  pull_request:
    types: [opened, synchronize]
    paths:
        - 'mlops-platform/**'

permissions:
  contents: read # access to check out code and install dependencies

jobs:
  test-components:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUNBUFFERED: "1"
      # Ensure tests can import local package
      PYTHONPATH: ${{ github.workspace }}/mlops-platform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get required Python version
        id: get-python-version
        run: |
          required_python_version="$(./run.sh get_required_python_version)"
          if [[ -z "${required_python_version}" ]]; then
            echo "Could not determine Python version; defaulting to 3.11"
            required_python_version="3.11"
          fi
          echo "required_python_version=${required_python_version}" >> "$GITHUB_OUTPUT"
          echo "Using Python ${required_python_version}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ steps.get-python-version.outputs.required_python_version }}'
          cache: 'pip'
          cache-dependency-path: |
            - dev/requirements.txt
            - pyproject.toml
            - poetry.lock

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev/requirements.txt

      - name: Run tests
        run: |
          pytest tests/

  get-project-version:
    runs-on: ubuntu-latest
    outputs:
        project_version: ${{ steps.project-version.outputs.project_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract package version from pyproject.toml
        id: project-version
        run: |
          project_version=$(./run.sh get_project_version)
          echo "project_version=$project_version" >> $GITHUB_OUTPUT
          echo "Project version: $project_version"

  build-docker-image-and-push-to-registry:
    runs-on: ubuntu-latest
    needs:
      - test-components
      - get-project-version
    defaults:
      run:
        working-directory: ./mlops-platform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ciaa
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run build check
        run: |
          # This validates the Dockerfile and the build configuration
          docker buildx build --check .

      - name: Local image smoke test (build & create container)
        id: smoke-test
        run: |
          IMG_TAG_TEST="ciaa/mlops-comps:${{ needs.get-project-version.outputs.project_version }}-test"
          # Register as an output for this step
          echo "IMG_TAG_TEST=$IMG_TAG_TEST" >> $GITHUB_OUTPUT

          # Build locally (loads the single-platform build result to docker images)
          echo "Build test image"
          docker buildx build --platform linux/amd64 --load --tag "$IMG_TAG_TEST" .

          SMOKE_CMD="import sys; print('ok'); sys.exit(0)"

          echo "Run smoke command"
          docker run --rm --entrypoint python "$IMG_TAG_TEST" \
           -c "$SMOKE_CMD" || {
              echo "Smoke test FAILED for $IMG_TAG_TEST"
              exit 1
          }

          echo "Smoke test PASSED for $IMG_TAG_TEST"
      - name: Get the docker image size (human readable)
        run: |
          IMG_TAG_TEST=${{ steps.smoke-test.outputs.IMG_TAG_TEST }}
          IMG_SIZE=$(docker inspect -f "{{ .Size }}" "$IMG_TAG_TEST" | numfmt --to=si)
          echo "Docker image size: $IMG_SIZE"

      - name: Final build and push
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          # Drop the test flag from the tag
          IMG_TAG=$(echo "${{ steps.smoke-test.outputs.IMG_TAG_TEST }}" | sed 's/-test$//')
          # Build and push the image to Docker Hub
          docker buildx build --platform linux/amd64 --attest=type=provenance,mode=max --attest=type=sbom --tag "$IMG_TAG" --push .
